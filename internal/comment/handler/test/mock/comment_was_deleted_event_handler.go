// Code generated by MockGen. DO NOT EDIT.
// Source: comment_was_deleted_event_handler.go

// Package mock_comment_handler is a generated GoMock package.
package mock_comment_handler

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockCommentWasDeletedEventService is a mock of CommentWasDeletedEventService interface.
type MockCommentWasDeletedEventService struct {
	ctrl     *gomock.Controller
	recorder *MockCommentWasDeletedEventServiceMockRecorder
}

// MockCommentWasDeletedEventServiceMockRecorder is the mock recorder for MockCommentWasDeletedEventService.
type MockCommentWasDeletedEventServiceMockRecorder struct {
	mock *MockCommentWasDeletedEventService
}

// NewMockCommentWasDeletedEventService creates a new mock instance.
func NewMockCommentWasDeletedEventService(ctrl *gomock.Controller) *MockCommentWasDeletedEventService {
	mock := &MockCommentWasDeletedEventService{ctrl: ctrl}
	mock.recorder = &MockCommentWasDeletedEventServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCommentWasDeletedEventService) EXPECT() *MockCommentWasDeletedEventServiceMockRecorder {
	return m.recorder
}

// DeleteComment mocks base method.
func (m *MockCommentWasDeletedEventService) DeleteComment(postId string, commentId uint64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "DeleteComment", postId, commentId)
}

// DeleteComment indicates an expected call of DeleteComment.
func (mr *MockCommentWasDeletedEventServiceMockRecorder) DeleteComment(postId, commentId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteComment", reflect.TypeOf((*MockCommentWasDeletedEventService)(nil).DeleteComment), postId, commentId)
}
