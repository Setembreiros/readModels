// Code generated by MockGen. DO NOT EDIT.
// Source: comment_was_created_event_handler.go

// Package mock_comment_handler is a generated GoMock package.
package mock_comment_handler

import (
	model "readmodels/internal/model"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockCommentWasCreatedEventService is a mock of CommentWasCreatedEventService interface.
type MockCommentWasCreatedEventService struct {
	ctrl     *gomock.Controller
	recorder *MockCommentWasCreatedEventServiceMockRecorder
}

// MockCommentWasCreatedEventServiceMockRecorder is the mock recorder for MockCommentWasCreatedEventService.
type MockCommentWasCreatedEventServiceMockRecorder struct {
	mock *MockCommentWasCreatedEventService
}

// NewMockCommentWasCreatedEventService creates a new mock instance.
func NewMockCommentWasCreatedEventService(ctrl *gomock.Controller) *MockCommentWasCreatedEventService {
	mock := &MockCommentWasCreatedEventService{ctrl: ctrl}
	mock.recorder = &MockCommentWasCreatedEventServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCommentWasCreatedEventService) EXPECT() *MockCommentWasCreatedEventServiceMockRecorder {
	return m.recorder
}

// CreateComment mocks base method.
func (m *MockCommentWasCreatedEventService) CreateComment(data *model.Comment) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "CreateComment", data)
}

// CreateComment indicates an expected call of CreateComment.
func (mr *MockCommentWasCreatedEventServiceMockRecorder) CreateComment(data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateComment", reflect.TypeOf((*MockCommentWasCreatedEventService)(nil).CreateComment), data)
}
