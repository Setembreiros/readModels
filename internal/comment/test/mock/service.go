// Code generated by MockGen. DO NOT EDIT.
// Source: service.go

// Package mock_comment is a generated GoMock package.
package mock_comment

import (
	model "readmodels/internal/model"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// AddNewComment mocks base method.
func (m *MockRepository) AddNewComment(data *model.Comment) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddNewComment", data)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddNewComment indicates an expected call of AddNewComment.
func (mr *MockRepositoryMockRecorder) AddNewComment(data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddNewComment", reflect.TypeOf((*MockRepository)(nil).AddNewComment), data)
}

// DeleteComment mocks base method.
func (m *MockRepository) DeleteComment(commentId uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteComment", commentId)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteComment indicates an expected call of DeleteComment.
func (mr *MockRepositoryMockRecorder) DeleteComment(commentId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteComment", reflect.TypeOf((*MockRepository)(nil).DeleteComment), commentId)
}

// GetCommentsByPostId mocks base method.
func (m *MockRepository) GetCommentsByPostId(postId string, lastCommentId uint64, limit int) ([]*model.Comment, uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCommentsByPostId", postId, lastCommentId, limit)
	ret0, _ := ret[0].([]*model.Comment)
	ret1, _ := ret[1].(uint64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetCommentsByPostId indicates an expected call of GetCommentsByPostId.
func (mr *MockRepositoryMockRecorder) GetCommentsByPostId(postId, lastCommentId, limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCommentsByPostId", reflect.TypeOf((*MockRepository)(nil).GetCommentsByPostId), postId, lastCommentId, limit)
}

// UpdateComment mocks base method.
func (m *MockRepository) UpdateComment(data *model.Comment) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateComment", data)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateComment indicates an expected call of UpdateComment.
func (mr *MockRepositoryMockRecorder) UpdateComment(data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateComment", reflect.TypeOf((*MockRepository)(nil).UpdateComment), data)
}
