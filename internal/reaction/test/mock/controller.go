// Code generated by MockGen. DO NOT EDIT.
// Source: controller.go

// Package mock_reaction is a generated GoMock package.
package mock_reaction

import (
	model "readmodels/internal/model"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockControllerService is a mock of ControllerService interface.
type MockControllerService struct {
	ctrl     *gomock.Controller
	recorder *MockControllerServiceMockRecorder
}

// MockControllerServiceMockRecorder is the mock recorder for MockControllerService.
type MockControllerServiceMockRecorder struct {
	mock *MockControllerService
}

// NewMockControllerService creates a new mock instance.
func NewMockControllerService(ctrl *gomock.Controller) *MockControllerService {
	mock := &MockControllerService{ctrl: ctrl}
	mock.recorder = &MockControllerServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockControllerService) EXPECT() *MockControllerServiceMockRecorder {
	return m.recorder
}

// GetLikesMetadataByPostId mocks base method.
func (m *MockControllerService) GetLikesMetadataByPostId(postId, lastUsername string, limit int) ([]*model.UserMetadata, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLikesMetadataByPostId", postId, lastUsername, limit)
	ret0, _ := ret[0].([]*model.UserMetadata)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetLikesMetadataByPostId indicates an expected call of GetLikesMetadataByPostId.
func (mr *MockControllerServiceMockRecorder) GetLikesMetadataByPostId(postId, lastUsername, limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLikesMetadataByPostId", reflect.TypeOf((*MockControllerService)(nil).GetLikesMetadataByPostId), postId, lastUsername, limit)
}

// GetReviewsByPostId mocks base method.
func (m *MockControllerService) GetReviewsByPostId(postId string, lastReviewId uint64, limit int) ([]*model.Review, uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReviewsByPostId", postId, lastReviewId, limit)
	ret0, _ := ret[0].([]*model.Review)
	ret1, _ := ret[1].(uint64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetReviewsByPostId indicates an expected call of GetReviewsByPostId.
func (mr *MockControllerServiceMockRecorder) GetReviewsByPostId(postId, lastReviewId, limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReviewsByPostId", reflect.TypeOf((*MockControllerService)(nil).GetReviewsByPostId), postId, lastReviewId, limit)
}

// GetSuperlikesMetadataByPostId mocks base method.
func (m *MockControllerService) GetSuperlikesMetadataByPostId(postId, lastUsername string, limit int) ([]*model.UserMetadata, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSuperlikesMetadataByPostId", postId, lastUsername, limit)
	ret0, _ := ret[0].([]*model.UserMetadata)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetSuperlikesMetadataByPostId indicates an expected call of GetSuperlikesMetadataByPostId.
func (mr *MockControllerServiceMockRecorder) GetSuperlikesMetadataByPostId(postId, lastUsername, limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSuperlikesMetadataByPostId", reflect.TypeOf((*MockControllerService)(nil).GetSuperlikesMetadataByPostId), postId, lastUsername, limit)
}
