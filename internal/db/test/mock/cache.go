// Code generated by MockGen. DO NOT EDIT.
// Source: cache.go

// Package mock_database is a generated GoMock package.
package mock_database

import (
	model "readmodels/internal/model"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockCacheClient is a mock of CacheClient interface.
type MockCacheClient struct {
	ctrl     *gomock.Controller
	recorder *MockCacheClientMockRecorder
}

// MockCacheClientMockRecorder is the mock recorder for MockCacheClient.
type MockCacheClientMockRecorder struct {
	mock *MockCacheClient
}

// NewMockCacheClient creates a new mock instance.
func NewMockCacheClient(ctrl *gomock.Controller) *MockCacheClient {
	mock := &MockCacheClient{ctrl: ctrl}
	mock.recorder = &MockCacheClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCacheClient) EXPECT() *MockCacheClientMockRecorder {
	return m.recorder
}

// Clean mocks base method.
func (m *MockCacheClient) Clean() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Clean")
}

// Clean indicates an expected call of Clean.
func (mr *MockCacheClientMockRecorder) Clean() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Clean", reflect.TypeOf((*MockCacheClient)(nil).Clean))
}

// GetPostComments mocks base method.
func (m *MockCacheClient) GetPostComments(postId string, lastCommentId uint64, limit int) ([]*model.Comment, uint64, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPostComments", postId, lastCommentId, limit)
	ret0, _ := ret[0].([]*model.Comment)
	ret1, _ := ret[1].(uint64)
	ret2, _ := ret[2].(bool)
	return ret0, ret1, ret2
}

// GetPostComments indicates an expected call of GetPostComments.
func (mr *MockCacheClientMockRecorder) GetPostComments(postId, lastCommentId, limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPostComments", reflect.TypeOf((*MockCacheClient)(nil).GetPostComments), postId, lastCommentId, limit)
}

// GetPostLikes mocks base method.
func (m *MockCacheClient) GetPostLikes(postId, lastUsername string, limit int) ([]*model.UserMetadata, string, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPostLikes", postId, lastUsername, limit)
	ret0, _ := ret[0].([]*model.UserMetadata)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(bool)
	return ret0, ret1, ret2
}

// GetPostLikes indicates an expected call of GetPostLikes.
func (mr *MockCacheClientMockRecorder) GetPostLikes(postId, lastUsername, limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPostLikes", reflect.TypeOf((*MockCacheClient)(nil).GetPostLikes), postId, lastUsername, limit)
}

// GetPostSuperlikes mocks base method.
func (m *MockCacheClient) GetPostSuperlikes(postId, lastUsername string, limit int) ([]*model.UserMetadata, string, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPostSuperlikes", postId, lastUsername, limit)
	ret0, _ := ret[0].([]*model.UserMetadata)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(bool)
	return ret0, ret1, ret2
}

// GetPostSuperlikes indicates an expected call of GetPostSuperlikes.
func (mr *MockCacheClientMockRecorder) GetPostSuperlikes(postId, lastUsername, limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPostSuperlikes", reflect.TypeOf((*MockCacheClient)(nil).GetPostSuperlikes), postId, lastUsername, limit)
}

// SetPostComments mocks base method.
func (m *MockCacheClient) SetPostComments(postId string, lastCommentId uint64, limit int, comments []*model.Comment) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetPostComments", postId, lastCommentId, limit, comments)
}

// SetPostComments indicates an expected call of SetPostComments.
func (mr *MockCacheClientMockRecorder) SetPostComments(postId, lastCommentId, limit, comments interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetPostComments", reflect.TypeOf((*MockCacheClient)(nil).SetPostComments), postId, lastCommentId, limit, comments)
}

// SetPostLikes mocks base method.
func (m *MockCacheClient) SetPostLikes(postId, lastUsername string, limit int, postLikes []*model.UserMetadata) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetPostLikes", postId, lastUsername, limit, postLikes)
}

// SetPostLikes indicates an expected call of SetPostLikes.
func (mr *MockCacheClientMockRecorder) SetPostLikes(postId, lastUsername, limit, postLikes interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetPostLikes", reflect.TypeOf((*MockCacheClient)(nil).SetPostLikes), postId, lastUsername, limit, postLikes)
}

// SetPostSuperlikes mocks base method.
func (m *MockCacheClient) SetPostSuperlikes(postId, lastUsername string, limit int, postLikes []*model.UserMetadata) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetPostSuperlikes", postId, lastUsername, limit, postLikes)
}

// SetPostSuperlikes indicates an expected call of SetPostSuperlikes.
func (mr *MockCacheClientMockRecorder) SetPostSuperlikes(postId, lastUsername, limit, postLikes interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetPostSuperlikes", reflect.TypeOf((*MockCacheClient)(nil).SetPostSuperlikes), postId, lastUsername, limit, postLikes)
}
