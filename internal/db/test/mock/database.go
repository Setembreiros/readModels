// Code generated by MockGen. DO NOT EDIT.
// Source: database.go

// Package mock_database is a generated GoMock package.
package mock_database

import (
	context "context"
	database "readmodels/internal/db"
	model "readmodels/internal/model"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockDatabaseClient is a mock of DatabaseClient interface.
type MockDatabaseClient struct {
	ctrl     *gomock.Controller
	recorder *MockDatabaseClientMockRecorder
}

// MockDatabaseClientMockRecorder is the mock recorder for MockDatabaseClient.
type MockDatabaseClientMockRecorder struct {
	mock *MockDatabaseClient
}

// NewMockDatabaseClient creates a new mock instance.
func NewMockDatabaseClient(ctrl *gomock.Controller) *MockDatabaseClient {
	mock := &MockDatabaseClient{ctrl: ctrl}
	mock.recorder = &MockDatabaseClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDatabaseClient) EXPECT() *MockDatabaseClientMockRecorder {
	return m.recorder
}

// Clean mocks base method.
func (m *MockDatabaseClient) Clean() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Clean")
}

// Clean indicates an expected call of Clean.
func (mr *MockDatabaseClientMockRecorder) Clean() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Clean", reflect.TypeOf((*MockDatabaseClient)(nil).Clean))
}

// CreateIndexesOnTable mocks base method.
func (m *MockDatabaseClient) CreateIndexesOnTable(tableName, indexName string, inndexes *[]database.TableAttributes, ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateIndexesOnTable", tableName, indexName, inndexes, ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateIndexesOnTable indicates an expected call of CreateIndexesOnTable.
func (mr *MockDatabaseClientMockRecorder) CreateIndexesOnTable(tableName, indexName, inndexes, ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateIndexesOnTable", reflect.TypeOf((*MockDatabaseClient)(nil).CreateIndexesOnTable), tableName, indexName, inndexes, ctx)
}

// CreateTable mocks base method.
func (m *MockDatabaseClient) CreateTable(tableName string, keys *[]database.TableAttributes, ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTable", tableName, keys, ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateTable indicates an expected call of CreateTable.
func (mr *MockDatabaseClientMockRecorder) CreateTable(tableName, keys, ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTable", reflect.TypeOf((*MockDatabaseClient)(nil).CreateTable), tableName, keys, ctx)
}

// GetCommentsByIndexPostId mocks base method.
func (m *MockDatabaseClient) GetCommentsByIndexPostId(postID string, lastCommentId uint64, limit int) ([]*model.Comment, uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCommentsByIndexPostId", postID, lastCommentId, limit)
	ret0, _ := ret[0].([]*model.Comment)
	ret1, _ := ret[1].(uint64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetCommentsByIndexPostId indicates an expected call of GetCommentsByIndexPostId.
func (mr *MockDatabaseClientMockRecorder) GetCommentsByIndexPostId(postID, lastCommentId, limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCommentsByIndexPostId", reflect.TypeOf((*MockDatabaseClient)(nil).GetCommentsByIndexPostId), postID, lastCommentId, limit)
}

// GetData mocks base method.
func (m *MockDatabaseClient) GetData(tableName string, key, result any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetData", tableName, key, result)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetData indicates an expected call of GetData.
func (mr *MockDatabaseClientMockRecorder) GetData(tableName, key, result interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetData", reflect.TypeOf((*MockDatabaseClient)(nil).GetData), tableName, key, result)
}

// GetMultipleData mocks base method.
func (m *MockDatabaseClient) GetMultipleData(tableName string, keys []any, results any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMultipleData", tableName, keys, results)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetMultipleData indicates an expected call of GetMultipleData.
func (mr *MockDatabaseClientMockRecorder) GetMultipleData(tableName, keys, results interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMultipleData", reflect.TypeOf((*MockDatabaseClient)(nil).GetMultipleData), tableName, keys, results)
}

// GetPostLikesByIndexPostId mocks base method.
func (m *MockDatabaseClient) GetPostLikesByIndexPostId(postID, lastUsername string, limit int) ([]*model.UserMetadata, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPostLikesByIndexPostId", postID, lastUsername, limit)
	ret0, _ := ret[0].([]*model.UserMetadata)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetPostLikesByIndexPostId indicates an expected call of GetPostLikesByIndexPostId.
func (mr *MockDatabaseClientMockRecorder) GetPostLikesByIndexPostId(postID, lastUsername, limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPostLikesByIndexPostId", reflect.TypeOf((*MockDatabaseClient)(nil).GetPostLikesByIndexPostId), postID, lastUsername, limit)
}

// GetPostSuperlikesByIndexPostId mocks base method.
func (m *MockDatabaseClient) GetPostSuperlikesByIndexPostId(postID, lastUsername string, limit int) ([]*model.UserMetadata, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPostSuperlikesByIndexPostId", postID, lastUsername, limit)
	ret0, _ := ret[0].([]*model.UserMetadata)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetPostSuperlikesByIndexPostId indicates an expected call of GetPostSuperlikesByIndexPostId.
func (mr *MockDatabaseClientMockRecorder) GetPostSuperlikesByIndexPostId(postID, lastUsername, limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPostSuperlikesByIndexPostId", reflect.TypeOf((*MockDatabaseClient)(nil).GetPostSuperlikesByIndexPostId), postID, lastUsername, limit)
}

// GetPostsByIndexUser mocks base method.
func (m *MockDatabaseClient) GetPostsByIndexUser(username, currentUsername, lastPostId, lastPostCreatedAt string, limit int) ([]*database.PostMetadata, string, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPostsByIndexUser", username, currentUsername, lastPostId, lastPostCreatedAt, limit)
	ret0, _ := ret[0].([]*database.PostMetadata)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(string)
	ret3, _ := ret[3].(error)
	return ret0, ret1, ret2, ret3
}

// GetPostsByIndexUser indicates an expected call of GetPostsByIndexUser.
func (mr *MockDatabaseClientMockRecorder) GetPostsByIndexUser(username, currentUsername, lastPostId, lastPostCreatedAt, limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPostsByIndexUser", reflect.TypeOf((*MockDatabaseClient)(nil).GetPostsByIndexUser), username, currentUsername, lastPostId, lastPostCreatedAt, limit)
}

// GetReviewsByIndexPostId mocks base method.
func (m *MockDatabaseClient) GetReviewsByIndexPostId(postID string, lastReviewId uint64, limit int) ([]*model.Review, uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReviewsByIndexPostId", postID, lastReviewId, limit)
	ret0, _ := ret[0].([]*model.Review)
	ret1, _ := ret[1].(uint64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetReviewsByIndexPostId indicates an expected call of GetReviewsByIndexPostId.
func (mr *MockDatabaseClientMockRecorder) GetReviewsByIndexPostId(postID, lastReviewId, limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReviewsByIndexPostId", reflect.TypeOf((*MockDatabaseClient)(nil).GetReviewsByIndexPostId), postID, lastReviewId, limit)
}

// IncrementCounter mocks base method.
func (m *MockDatabaseClient) IncrementCounter(tableName string, key any, counterFieldName string, incrementValue int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IncrementCounter", tableName, key, counterFieldName, incrementValue)
	ret0, _ := ret[0].(error)
	return ret0
}

// IncrementCounter indicates an expected call of IncrementCounter.
func (mr *MockDatabaseClientMockRecorder) IncrementCounter(tableName, key, counterFieldName, incrementValue interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IncrementCounter", reflect.TypeOf((*MockDatabaseClient)(nil).IncrementCounter), tableName, key, counterFieldName, incrementValue)
}

// IndexExists mocks base method.
func (m *MockDatabaseClient) IndexExists(tableName, indexName string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IndexExists", tableName, indexName)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IndexExists indicates an expected call of IndexExists.
func (mr *MockDatabaseClientMockRecorder) IndexExists(tableName, indexName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IndexExists", reflect.TypeOf((*MockDatabaseClient)(nil).IndexExists), tableName, indexName)
}

// InsertData mocks base method.
func (m *MockDatabaseClient) InsertData(tableName string, attributes any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertData", tableName, attributes)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertData indicates an expected call of InsertData.
func (mr *MockDatabaseClientMockRecorder) InsertData(tableName, attributes interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertData", reflect.TypeOf((*MockDatabaseClient)(nil).InsertData), tableName, attributes)
}

// InsertDataAndIncreaseCounter mocks base method.
func (m *MockDatabaseClient) InsertDataAndIncreaseCounter(tableName string, attributes any, counterTableName string, counterKey any, counterFieldName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertDataAndIncreaseCounter", tableName, attributes, counterTableName, counterKey, counterFieldName)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertDataAndIncreaseCounter indicates an expected call of InsertDataAndIncreaseCounter.
func (mr *MockDatabaseClientMockRecorder) InsertDataAndIncreaseCounter(tableName, attributes, counterTableName, counterKey, counterFieldName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertDataAndIncreaseCounter", reflect.TypeOf((*MockDatabaseClient)(nil).InsertDataAndIncreaseCounter), tableName, attributes, counterTableName, counterKey, counterFieldName)
}

// RemoveDataAndDecreaseCounter mocks base method.
func (m *MockDatabaseClient) RemoveDataAndDecreaseCounter(tableName string, key any, counterTableName string, counterKey any, counterFieldName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveDataAndDecreaseCounter", tableName, key, counterTableName, counterKey, counterFieldName)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveDataAndDecreaseCounter indicates an expected call of RemoveDataAndDecreaseCounter.
func (mr *MockDatabaseClientMockRecorder) RemoveDataAndDecreaseCounter(tableName, key, counterTableName, counterKey, counterFieldName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveDataAndDecreaseCounter", reflect.TypeOf((*MockDatabaseClient)(nil).RemoveDataAndDecreaseCounter), tableName, key, counterTableName, counterKey, counterFieldName)
}

// RemoveMultipleData mocks base method.
func (m *MockDatabaseClient) RemoveMultipleData(tableName string, keys []any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveMultipleData", tableName, keys)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveMultipleData indicates an expected call of RemoveMultipleData.
func (mr *MockDatabaseClientMockRecorder) RemoveMultipleData(tableName, keys interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveMultipleData", reflect.TypeOf((*MockDatabaseClient)(nil).RemoveMultipleData), tableName, keys)
}

// RemoveMultipleDataAndDecreaseCounter mocks base method.
func (m *MockDatabaseClient) RemoveMultipleDataAndDecreaseCounter(tableName string, keys []any, counterTableName string, counterKey any, counterFieldName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveMultipleDataAndDecreaseCounter", tableName, keys, counterTableName, counterKey, counterFieldName)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveMultipleDataAndDecreaseCounter indicates an expected call of RemoveMultipleDataAndDecreaseCounter.
func (mr *MockDatabaseClientMockRecorder) RemoveMultipleDataAndDecreaseCounter(tableName, keys, counterTableName, counterKey, counterFieldName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveMultipleDataAndDecreaseCounter", reflect.TypeOf((*MockDatabaseClient)(nil).RemoveMultipleDataAndDecreaseCounter), tableName, keys, counterTableName, counterKey, counterFieldName)
}

// TableExists mocks base method.
func (m *MockDatabaseClient) TableExists(tableName string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TableExists", tableName)
	ret0, _ := ret[0].(bool)
	return ret0
}

// TableExists indicates an expected call of TableExists.
func (mr *MockDatabaseClientMockRecorder) TableExists(tableName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TableExists", reflect.TypeOf((*MockDatabaseClient)(nil).TableExists), tableName)
}

// Truncate mocks base method.
func (m *MockDatabaseClient) Truncate() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Truncate")
}

// Truncate indicates an expected call of Truncate.
func (mr *MockDatabaseClientMockRecorder) Truncate() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Truncate", reflect.TypeOf((*MockDatabaseClient)(nil).Truncate))
}

// UpdateData mocks base method.
func (m *MockDatabaseClient) UpdateData(tableName string, key any, updateAttributes map[string]any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateData", tableName, key, updateAttributes)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateData indicates an expected call of UpdateData.
func (mr *MockDatabaseClientMockRecorder) UpdateData(tableName, key, updateAttributes interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateData", reflect.TypeOf((*MockDatabaseClient)(nil).UpdateData), tableName, key, updateAttributes)
}
