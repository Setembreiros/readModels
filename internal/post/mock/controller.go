// Code generated by MockGen. DO NOT EDIT.
// Source: controller.go

// Package mock_post is a generated GoMock package.
package mock_post

import (
	post "readmodels/internal/post"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockService is a mock of Service interface.
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
}

// MockServiceMockRecorder is the mock recorder for MockService.
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance.
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// GetPostMetadatasByUser mocks base method.
func (m *MockService) GetPostMetadatasByUser(username, currentUsername, lastPostId, lastPostCreatedAt string, limit int) ([]*post.PostMetadata, string, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPostMetadatasByUser", username, currentUsername, lastPostId, lastPostCreatedAt, limit)
	ret0, _ := ret[0].([]*post.PostMetadata)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(string)
	ret3, _ := ret[3].(error)
	return ret0, ret1, ret2, ret3
}

// GetPostMetadatasByUser indicates an expected call of GetPostMetadatasByUser.
func (mr *MockServiceMockRecorder) GetPostMetadatasByUser(username, currentUsername, lastPostId, lastPostCreatedAt, limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPostMetadatasByUser", reflect.TypeOf((*MockService)(nil).GetPostMetadatasByUser), username, currentUsername, lastPostId, lastPostCreatedAt, limit)
}
